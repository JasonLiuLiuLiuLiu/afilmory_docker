name: Build and Push Docker Image

# Manual trigger
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag (default: latest)'
        required: false
        default: 'latest'
        type: string
      deploy:
        description: 'Deploy to VPS server'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: pic_pigsbig

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          cat > .env << EOF
          S3_REGION=${{ secrets.S3_REGION || 'us-east-1' }}
          S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }}
          S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          S3_PREFIX=${{ secrets.S3_PREFIX || 'img' }}
          S3_ENDPOINT=${{ secrets.S3_ENDPOINT }}
          S3_CUSTOM_DOMAIN=${{ secrets.S3_CUSTOM_DOMAIN }}
          EOF
          
          # Add optional environment variables
          if [ -n "${{ secrets.GIT_TOKEN }}" ]; then
            echo "GIT_TOKEN=${{ secrets.GIT_TOKEN }}" >> .env
          fi
          
          if [ -n "${{ secrets.PG_CONNECTION_STRING }}" ]; then
            echo "PG_CONNECTION_STRING=${{ secrets.PG_CONNECTION_STRING }}" >> .env
          fi
          
          echo "‚úÖ .env file created"
          echo "Environment variables included:"
          grep -E "^[A-Z_]+" .env | cut -d'=' -f1 | sort

      - name: Update builder.config.json configuration
        run: |
          # Read current builder.config.json
          current_config=$(cat builder.config.json)
          
          # Update configuration using jq if secrets exist
          updated_config="$current_config"
          
          # Update bucket name (if provided)
          if [ -n "${{ secrets.STORAGE_BUCKET }}" ]; then
            updated_config=$(echo "$updated_config" | jq '.storage.bucket = "${{ secrets.STORAGE_BUCKET }}"')
          fi
          
          # Update custom domain (if provided)
          if [ -n "${{ secrets.STORAGE_CUSTOM_DOMAIN }}" ]; then
            updated_config=$(echo "$updated_config" | jq '.storage.customDomain = "${{ secrets.STORAGE_CUSTOM_DOMAIN }}"')
          fi
          
          # Update storage region (if provided)
          if [ -n "${{ secrets.STORAGE_REGION }}" ]; then
            updated_config=$(echo "$updated_config" | jq '.storage.region = "${{ secrets.STORAGE_REGION }}"')
          fi
          
          # Update storage prefix (if provided)
          if [ -n "${{ secrets.STORAGE_PREFIX }}" ]; then
            updated_config=$(echo "$updated_config" | jq '.storage.prefix = "${{ secrets.STORAGE_PREFIX }}"')
          fi
          
          # Update repository URL (if provided)
          if [ -n "${{ secrets.REPO_URL }}" ]; then
            updated_config=$(echo "$updated_config" | jq '.repo.url = "${{ secrets.REPO_URL }}"')
          fi
          
          # Update repository enable status (if provided)
          if [ -n "${{ secrets.REPO_ENABLE }}" ]; then
            updated_config=$(echo "$updated_config" | jq '.repo.enable = (${{ secrets.REPO_ENABLE }} | test("true"; "i"))')
          fi
          
          # Write updated configuration
          echo "$updated_config" > builder.config.json
          echo "‚úÖ builder.config.json updated"
          echo "Current configuration:"
          cat builder.config.json | jq .

      - name: Update config.json configuration
        run: |
          # Read current config.json
          current_config=$(cat config.json)
          
          # Update configuration using jq if secrets exist
          updated_config="$current_config"
          
          # Update site name (if provided)
          if [ -n "${{ secrets.SITE_NAME }}" ]; then
            updated_config=$(echo "$updated_config" | jq '.name = "${{ secrets.SITE_NAME }}"')
          fi
          
          # Update site title (if provided)
          if [ -n "${{ secrets.SITE_TITLE }}" ]; then
            updated_config=$(echo "$updated_config" | jq '.title = "${{ secrets.SITE_TITLE }}"')
          fi
          
          # Update site description (if provided)
          if [ -n "${{ secrets.SITE_DESCRIPTION }}" ]; then
            updated_config=$(echo "$updated_config" | jq '.description = "${{ secrets.SITE_DESCRIPTION }}"')
          fi
          
          # Update site URL (if provided)
          if [ -n "${{ secrets.SITE_URL }}" ]; then
            updated_config=$(echo "$updated_config" | jq '.url = "${{ secrets.SITE_URL }}"')
          fi
          
          # Update accent color (if provided)
          if [ -n "${{ secrets.ACCENT_COLOR }}" ]; then
            updated_config=$(echo "$updated_config" | jq '.accentColor = "${{ secrets.ACCENT_COLOR }}"')
          fi
          
          # Update author information (if provided)
          if [ -n "${{ secrets.AUTHOR_NAME }}" ]; then
            updated_config=$(echo "$updated_config" | jq '.author.name = "${{ secrets.AUTHOR_NAME }}"')
          fi
          
          if [ -n "${{ secrets.AUTHOR_URL }}" ]; then
            updated_config=$(echo "$updated_config" | jq '.author.url = "${{ secrets.AUTHOR_URL }}"')
          fi
          
          if [ -n "${{ secrets.AUTHOR_AVATAR }}" ]; then
            updated_config=$(echo "$updated_config" | jq '.author.avatar = "${{ secrets.AUTHOR_AVATAR }}"')
          fi
          
          # Update social media (if provided)
          if [ -n "${{ secrets.TWITTER_HANDLE }}" ]; then
            updated_config=$(echo "$updated_config" | jq '.social.twitter = "${{ secrets.TWITTER_HANDLE }}"')
          fi
          
          # Write updated configuration
          echo "$updated_config" > config.json
          echo "‚úÖ config.json updated"
          echo "Current configuration:"
          cat config.json | jq .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up repository owner (lowercase)
        id: repo
        run: |
          echo "owner=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.repo.outputs.owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ inputs.tag || 'latest' }}
            type=raw,value=build-${{ github.run_number }}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            S3_REGION=${{ secrets.S3_REGION || 'us-east-1' }}
            S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }}
            S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            S3_PREFIX=${{ secrets.S3_PREFIX || 'img' }}
            S3_ENDPOINT=${{ secrets.S3_ENDPOINT }}
            S3_CUSTOM_DOMAIN=${{ secrets.S3_CUSTOM_DOMAIN }}
            ${{ secrets.GIT_TOKEN && format('GIT_TOKEN={0}', secrets.GIT_TOKEN) || '' }}
            ${{ secrets.PG_CONNECTION_STRING && format('PG_CONNECTION_STRING={0}', secrets.PG_CONNECTION_STRING) || '' }}
          no-cache: true

      - name: Build completion notification
        run: |
          echo "üéâ Docker image built successfully!"
          echo "üì¶ Image tags: ${{ steps.meta.outputs.tags }}"
          echo "üîó Image URL: ${{ env.REGISTRY }}/${{ steps.repo.outputs.owner }}/${{ env.IMAGE_NAME }}:${{ inputs.tag || 'latest' }}"
          echo ""
          echo "üöÄ Run container with the following command:"
          echo "docker run -p 3000:3000 ${{ env.REGISTRY }}/${{ steps.repo.outputs.owner }}/${{ env.IMAGE_NAME }}:${{ inputs.tag || 'latest' }}"

      - name: Deploy to VPS server
        if: ${{ inputs.deploy == true }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            set -e
            
            # Set variables
            IMAGE_NAME="${{ env.REGISTRY }}/${{ steps.repo.outputs.owner }}/${{ env.IMAGE_NAME }}"
            TAG="${{ inputs.tag || 'latest' }}"
            CONTAINER_NAME="pic-gallery"
            CONTAINER_PORT="3000"
            HOST_PORT="${{ secrets.VPS_HOST_PORT || '3000' }}"
            
            echo "üöÄ Starting deployment to VPS server..."
            echo "üì¶ Image: ${IMAGE_NAME}:${TAG}"
            echo "üîå Port mapping: ${HOST_PORT}:${CONTAINER_PORT}"
            
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            # Stop and remove old container (if exists)
            if docker ps -q -f name=${CONTAINER_NAME} | grep -q .; then
              echo "üõë Stopping old container..."
              docker stop ${CONTAINER_NAME}
            fi
            
            if docker ps -a -q -f name=${CONTAINER_NAME} | grep -q .; then
              echo "üóëÔ∏è Removing old container..."
              docker rm ${CONTAINER_NAME}
            fi
            
            # Pull latest image
            echo "‚¨áÔ∏è Pulling new image..."
            docker pull ${IMAGE_NAME}:${TAG}
            
            # Clean up old images (keep latest)
            echo "üßπ Cleaning up old images..."
            docker image prune -f
            
            # Run new container
            echo "üèÉ Starting new container..."
            docker run -d \
              --name ${CONTAINER_NAME} \
              --restart always \
              -p ${HOST_PORT}:${CONTAINER_PORT} \
              -e NODE_ENV=production \
              ${IMAGE_NAME}:${TAG}
            
            # Check container status
            sleep 5
            if docker ps -q -f name=${CONTAINER_NAME} | grep -q .; then
              echo "‚úÖ Container started successfully!"
              echo "üåê Service URL: http://${{ secrets.VPS_HOST }}:${HOST_PORT}"
            else
              echo "‚ùå Container failed to start!"
              echo "üìã Container logs:"
              docker logs ${CONTAINER_NAME}
              exit 1
            fi

      - name: Deployment completion notification
        if: ${{ inputs.deploy == true }}
        run: |
          echo "üéä Deployment completed!"
          echo "üåê Service URL: http://${{ secrets.VPS_HOST }}:${{ secrets.VPS_HOST_PORT || '3000' }}"
          echo "üìä Container status: Running"
          echo "üîß Management commands:"
          echo "  View logs: docker logs pic-gallery"
          echo "  Restart service: docker restart pic-gallery"
          echo "  Stop service: docker stop pic-gallery"
